// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	users "github.com/fahminlb33/devoria1-wtc-backend/domain/users"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/fahminlb33/devoria1-wtc-backend/infrastructure/utils"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// GetProfile provides a mock function with given fields: c, model
func (_m *UserUseCase) GetProfile(c context.Context, model users.GetProfileModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, users.GetProfileModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// Login provides a mock function with given fields: c, model
func (_m *UserUseCase) Login(c context.Context, model users.LoginModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, users.LoginModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// Register provides a mock function with given fields: c, model
func (_m *UserUseCase) Register(c context.Context, model users.RegisterModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, users.RegisterModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}
