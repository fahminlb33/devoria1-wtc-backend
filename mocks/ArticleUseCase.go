// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	articles "github.com/fahminlb33/devoria1-wtc-backend/domain/articles"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/fahminlb33/devoria1-wtc-backend/infrastructure/utils"
)

// ArticleUseCase is an autogenerated mock type for the ArticleUseCase type
type ArticleUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, model
func (_m *ArticleUseCase) Create(c context.Context, model articles.CreateModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, articles.CreateModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// Delete provides a mock function with given fields: c, model
func (_m *ArticleUseCase) Delete(c context.Context, model articles.DeleteModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, articles.DeleteModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// FindAll provides a mock function with given fields: c, model
func (_m *ArticleUseCase) FindAll(c context.Context, model articles.FindAllModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, articles.FindAllModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// Get provides a mock function with given fields: c, model
func (_m *ArticleUseCase) Get(c context.Context, model articles.GetModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, articles.GetModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}

// Save provides a mock function with given fields: c, model
func (_m *ArticleUseCase) Save(c context.Context, model articles.SaveModel) utils.Response {
	ret := _m.Called(c, model)

	var r0 utils.Response
	if rf, ok := ret.Get(0).(func(context.Context, articles.SaveModel) utils.Response); ok {
		r0 = rf(c, model)
	} else {
		r0 = ret.Get(0).(utils.Response)
	}

	return r0
}
